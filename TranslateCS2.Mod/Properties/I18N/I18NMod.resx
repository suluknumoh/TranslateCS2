<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CurrentLanguageDescription" xml:space="preserve">
    <value>Currently selected language within the default interface settings.</value>
  </data>
  <data name="CurrentLanguageLabel" xml:space="preserve">
    <value>Current language</value>
  </data>
  <data name="FlavorDescription" xml:space="preserve">
    <value>Select a flavor for the current selected language.</value>
  </data>
  <data name="FlavorLabel" xml:space="preserve">
    <value>Flavor</value>
  </data>
  <data name="GroupExportExportButtonDescription" xml:space="preserve">
    <value>Exports the selected languages vanilla entries
as UTF8 encoded .json-file (Key-Value-Pairs)
to the selected destination.
Values are taken from the .loc-file within the LocaleAsset-Database.
Warnings:
If the games respective .loc-file is manually overwritten, the export contains those values.
Existing files within the Destination are going to be overwritten.</value>
  </data>
  <data name="GroupExportExportButtonLabel" xml:space="preserve">
    <value>export</value>
  </data>
  <data name="GroupExportExportButtonWarning" xml:space="preserve">
    <value>Existing files are going to be overwritten.
Do you really want to export the selected language?</value>
  </data>
  <data name="GroupExportExportDirectoryDescription" xml:space="preserve">
    <value>The directory the selected language gets exported to.</value>
  </data>
  <data name="GroupExportExportDirectoryLabel" xml:space="preserve">
    <value>Destination</value>
  </data>
  <data name="GroupExportExportDropDownDescription" xml:space="preserve">
    <value>Select the language to export.</value>
  </data>
  <data name="GroupExportExportDropDownLabel" xml:space="preserve">
    <value>Language to export</value>
  </data>
  <data name="GroupExportTitle" xml:space="preserve">
    <value>export</value>
  </data>
  <data name="GroupFlavorTitle" xml:space="preserve">
    <value>flavors</value>
  </data>
  <data name="GroupGenerateButtonGenerateDescription" xml:space="preserve">
    <value>Generates a .json-file named
'{0}'
with all Key-Value-Pairs for this Mod that can be found in this mods data-directory
'{1}'
after a click on this button.
The .json-file named
'{0}'
is NOT read by this Mod.
It enables you to integrate the included key-value pairs into a corresponding language file and to translate the entries for this Mod.</value>
  </data>
  <data name="GroupGenerateButtonGenerateLabel" xml:space="preserve">
    <value>generate localization json</value>
  </data>
  <data name="GroupGenerateButtonLogMarkdownAndCultureInfoNamesDescription" xml:space="preserve">
    <value>generates two log entries. one with the markdown for readme.md and one for an internal list</value>
  </data>
  <data name="GroupGenerateButtonLogMarkdownAndCultureInfoNamesLabel" xml:space="preserve">
    <value>log Markdown and CultureInfo-Names</value>
  </data>
  <data name="GroupGenerateTitle" xml:space="preserve">
    <value>log and generate</value>
  </data>
  <data name="GroupReloadButtonReloadDescription" xml:space="preserve">
    <value>Reloads the language file(s) that existed at startup.
Does not unload language files.
Does not load new language files.
Files have to be located within this directory '{0}'</value>
  </data>
  <data name="GroupReloadButtonReloadLabel" xml:space="preserve">
    <value>reload language files</value>
  </data>
  <data name="GroupReloadButtonReloadWarning" xml:space="preserve">
    <value>Do you really want to reload the language file(s)?</value>
  </data>
  <data name="GroupReloadTitle" xml:space="preserve">
    <value>reload</value>
  </data>
  <data name="GroupSettingsTitle" xml:space="preserve">
    <value>settings</value>
  </data>
  <data name="GroupSettingsToggleLoadFromOtherModsDescription" xml:space="preserve">
    <value>This mod is able to sideload unofficial locales that are provided by other mods.
If this box is checked, this mod loads those locales from other mods.
If this box is not checked, it does not load locales from other mods.
It is safe, to check this box.
The Translation(s) provided within this mods data-directory rule and won't be overwritten.</value>
  </data>
  <data name="GroupSettingsToggleLoadFromOtherModsLabel" xml:space="preserve">
    <value>Load from other mods</value>
  </data>
</root>